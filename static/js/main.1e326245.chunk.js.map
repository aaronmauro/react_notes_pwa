{"version":3,"sources":["containers/Layout/Layout.js","containers/NavExpand/NavExpand.js","components/Boards/Boards.js","components/NewNote/NewNote.js","components/Main/Main.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["layout","props","className","children","NavExpand","Navbar","bg","variant","Brand","href","Nav","Link","Component","Boards","notes","setNotes","db","Localbase","useEffect","collection","get","then","dbnotes","getBoards","Container","map","note","Card","border","Body","onClick","id","filter","n","doc","delete","deleteBoard","Title","title","Text","text","Newnote","useState","form","setForm","uniqid","setId","handleInputChange","event","target","value","name","saveNote","add","Form","onSubmit","Group","Label","Control","onChange","as","rows","type","placeholder","Button","mainpage","Header","App","exact","path","NewNote","Main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1e326245.chunk.js","sourcesContent":["import React from 'react';\nimport './Layout.css';\n\nconst layout = (props) => (\n    <div>\n        <main className=\"mainContent\">\n            {props.children}\n        </main>\n    </div>\n);\n\nexport default layout;","import React, {Component} from 'react';\nimport {Navbar, Nav} from 'react-bootstrap';\n//import {LinkContainer} from 'react-router-bootstrap';\nimport './NavExpand.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nclass NavExpand extends Component {\n   \n    render()\n    {\n        return(\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"/\">N</Navbar.Brand>\n                <Nav className=\"mr-auto\">\n                <Nav.Link href=\"/\">New</Nav.Link>\n                <Nav.Link href=\"/notes\">Notes</Nav.Link>\n                <Nav.Link href=\"/about\">About</Nav.Link>\n                </Nav>\n            </Navbar>\n                \n        )\n    }\n}\nexport default NavExpand;","import React, {useEffect} from 'react';\nimport {Card,Container} from 'react-bootstrap';\nimport './Boards.css';\nimport Localbase from 'localbase';\n\nconst Boards = ({ notes, setNotes }) => {\n\n    let db = new Localbase('db');\n\n    function deleteBoard(id, db) {\n        setNotes(notes.filter(n => n.id !== id))\n        db.collection('dbnotes').doc({id:id}).delete()\n    }\n\n    function getBoards(db) {\n        db.collection('dbnotes').get().then(dbnotes => {\n            //console.log('dbnotes', dbnotes);\n            setNotes(dbnotes)\n        });\n    }\n\n    useEffect(() => {\n        getBoards(db);\n      }, []);\n\n    return (\n        <div>\n            <Container>\n            {notes.map((note) => (\n            <Card border=\"warning\" className=\"cardBoard\">\n                    <Card.Body>\n                    <i className=\"icon-trash float-right\" onClick={() => deleteBoard(note.id, db)}></i>\n                    <Card.Title>{note.title}</Card.Title>\n                    <Card.Text>\n                        {note.text}\n                    </Card.Text>\n                    </Card.Body>\n            </Card>\n            ))}\n            </Container>\n        </div>\n    )\n}\n\nexport default Boards;","import React, {useState} from 'react';\nimport {Form, Button, Container} from 'react-bootstrap';\nimport uniqid from 'uniqid';\nimport Localbase from 'localbase';\n\nlet db = new Localbase('db');\n// Object { title: \"\", text: \"\", id: \"\" }\n\nconst Newnote = ({setNotes}) => {\n\n    const [form, setForm] = useState({title: '', text: ''})\n    const [id, setId] = useState(uniqid())\n\n    function handleInputChange(event) {\n        const {value, name} = event.target\n        setForm({...form, [name]: value, id})\n        //console.log(form)\n    }\n\n    function saveNote() {\n        if (form.title !== '' || form.text !== ''){\n            setNotes(note => [...note, form]);\n            setId(uniqid());\n            setForm({title:'', text:''});\n            db.collection('dbnotes').add(form)\n        }\n    }\n\n    //console.log(setNotes)\n    return (\n        <Container>\n        <Form onSubmit={saveNote}>\n            <Form.Group>\n                <Form.Label>New Title</Form.Label>\n                <Form.Control onChange={handleInputChange} \n                    value={form.title} as=\"textarea\" \n                    rows={1} name=\"title\" type=\"text\" \n                    placeholder=\"Title\" />\n            </Form.Group>\n            <Form.Group>\n            <Form.Label>New Note</Form.Label>\n            <Form.Control onChange={handleInputChange} \n                value={form.text} as=\"textarea\" \n                rows={10} name=\"text\" type=\"text\" \n                placeholder=\"Note\" />\n            </Form.Group>\n        </Form>\n        <Button onClick={saveNote} type=\"submit\">\n            Save\n        </Button>\n        </Container>\n    )\n}\n\nexport default Newnote;","import React from 'react';\nimport {Card, Container} from 'react-bootstrap';\n\nconst mainpage = () => {\n        return(\n            <Container>\n            <Card>\n              <Card.Header>About</Card.Header>\n              <Card.Body>\n                <Card.Title>React Notes</Card.Title>\n                <Card.Text>\n                  This is a sample React based Progressive Web App developed for the students of Interactive Arts and Science 3F02 at Brock University.\n                </Card.Text>\n              </Card.Body>\n            </Card>\n            </Container>\n        );\n    }\n\n\nexport default mainpage;","import React, {useState} from 'react';\nimport Layout from './containers/Layout/Layout';\nimport NavExpand from './containers/NavExpand/NavExpand';\nimport {Switch, Route} from 'react-router-dom';\nimport Boards from './components/Boards/Boards';\nimport NewNote from './components/NewNote/NewNote';\nimport MainPage from './components/Main/Main';\nimport 'react-bootstrap';\nimport 'bootswatch/dist/superhero/bootstrap.min.css'; // quick style provided here\nimport './App.css';\n\nfunction App() {\n\n  const [notes,setNotes] = useState([])\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <NavExpand />\n      </Layout>\n      <Switch>\n        <Route exact path=\"/\">\n          <NewNote setNotes={setNotes}/>\n        </Route>\n        <Route path=\"/about\">\n          <MainPage/>\n        </Route>\n        <Route path=\"/notes\">\n          <Boards notes={notes} setNotes={setNotes}/>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}